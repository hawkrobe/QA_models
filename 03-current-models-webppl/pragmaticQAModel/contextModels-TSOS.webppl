////////////////////////////////////////////////////////////////////
// 'tsos' : minimal 'target-same-other-mostsimilar' scenario
////////////////////////////////////////////////////////////////////

var tsosAtoms = ['target', 'competitor', 'sameCat', 'otherCat', 'mostSimilar']

var tsosContextSets      = prepareContextSets(tsosAtoms);
var tsosPowerSet         = tsosContextSets.powerSet;
var tsosR1WHResponses    = tsosContextSets.R1WHResponses;
var tsosR1PolarResponses = tsosContextSets.R1PolarResponses;

var tsosContext = {
  name : "tsosContext",
  worlds : tsosPowerSet,
  actions: _.concat(tsosAtoms, "nothing"),
  questions: [
    {type: 'single-item', queried: ['target'], text: 'Target?'},
    {type: 'single-item', queried: ['competitor'], text: 'Competitor?'},
    {type: 'single-item', queried: ['sameCat'], text: 'Same Cagegory?'},
    {type: 'single-item', queried: ['otherCat'], text: 'Other Category?'},
    {type: 'single-item', queried: ['mostSimilar'], text: 'Most Similar?'},
    {type: 'wh', queried: tsosAtoms, text: 'Which elements?'},
  ],
  questionerBeliefs: Categorical({vs: tsosPowerSet}),
  R0PriorOverWorlds: Delta({v: 'competitor+sameCat+otherCat+mostSimilar'}),
  R1PriorOverWorlds: Delta({v: 'competitor+sameCat+otherCat+mostSimilar'}),
  decisionProblem: function(w, a) {
    return _.includes(w, a) ?
                     (a == 'target'     ? 50 :
                      a == 'competitor' ? 25  :
                      a == 'sameCat'    ? 4  :
                      a == 'otherCat'    ? 4  :
                      a == 'mostSimilar'    ? 4  :
                                          1) :
               0.0001;
  },

  // R0 chooses among responses licensed by the question
  getLicensedResponsesR0: function(question) {
    if(question.type == 'single-item') {
      // by definition polar questions require 'yes'/'no' answer
      return ['yes', 'no'];
    } else if(question.type == 'polar-disjunct') {
      // by definition polar questions require 'yes'/'no' answer
      var answers = ['yes', 'no'].concat(question.queried);
      return answers;
    } else if(question.type == 'wh') {
      // 'wh' questions allow you to say any set of queried items,
      // or to say "nothing" when none of the querried items exist
      return replaceEmptyListWithStringNothing(
        map(
          function(v){return v.join('+');},
          powerset(question.queried)
        ));
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  },

  // R1 chooses among responses licensed by the question
  getLicensedResponsesR1: function(question) {
    return (question.type == 'wh' ?
            tsosR1WHResponses : tsosR1PolarResponses)
  },
  // semantic meaning function
  meaning: meaningFunction
};
