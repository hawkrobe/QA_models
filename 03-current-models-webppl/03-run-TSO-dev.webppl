//  -------------------
// | global parameters |
//  -------------------

var params = {
  policyAlpha     : 2.5,    // SM-alpha for action policy
  questionerAlpha : 1,      // SM-alpha for question choice
  R1Alpha         : 3,      // SM-alpha for R1
  relevanceBetaR0 : 0,      // beta=1 for only action-utility
  relevanceBetaR1 : 0.95,   //
  costWeight      : 0.25,
  questionCost    : 0.25    // cost for a question (relative to no question)
};


//  -------------------
// | test TSO example |
//  -------------------


var context = tsoContext;
console.log('context: \t', context.name);

var question = context.questions[0];
console.log('question: \t', question.text)

var world = 'competitor+sameCat+otherCat';
console.log('world: \t\t', world);

var responsesR0 = context.getLicensedResponsesR0
console.log('R0 resp. set: \t', responsesR0(question))

var responseR0 = responsesR0(question)[0]
console.log('response R0: \t', responseR0)

var meaning = context.meaning
console.log('truth R0 r.: \t', meaning(world,question,responseR0));

var responsesR1 = context.getLicensedResponsesR1
// console.log('R1 resp. set \t: ', responsesR1(question))

// map(
//   function(world) {
//     console.log("In world ('"+ world +"') the following of R1's responses are true: \n",
//                 filter(function (r) {
//                   meaning(world,question,r)
//                 },
//                        responsesR1(question))
//                )
//   },
//   setsOfBakedGoods
// )

var responseR1 = responsesR1(question)[0]
console.log('response R1: \t', responseR1)


var R0_test = R0(question, context, params)

console.log("R0:")
terminalViz(R0_test, 4)

var Q1_test = Q1(context, params)
console.log("Q1:")
terminalViz(Q1_test, 4)

// var R0Ext_test = R1ContextFree(question, context, params)
// console.log("R0 (extended):")
// terminalViz(R0Ext_test, 4)

// ---------------------------------------------
// testing R1 with full knowledge of preferences
// ---------------------------------------------

console.log("---------------------------------------------\n",
            "Testing R1 with full knowledge of preferences",
           "---------------------------------------------\n")

// R1 knows full context model
var R1Prior_FullKnowledge = {
  trueWorld: tsoContext,
  distribution: Categorical({vs: ["trueWorld"]})
}

var R1posterior = R1ContextPosterior(tsoContext, question, R1Prior_FullKnowledge, params);
console.log("Posterior inference (trivial)")
terminalViz(marginalize(R1posterior, 'label'),4)

var R1Prediction = R1Averager(tsoContext, R1Prior_FullKnowledge, question, params)
var R1PredictionReduced = Infer({
  method: 'enumerate'},
  function() {
    var response = sample(R1Prediction);
    var match = response == 'no.---' ? true :
        response == 'no.competitor' ? true :
        response == 'no.sameCat' ? true :
        response == 'no.otherCat' ? true :
        response == 'no.competitor+sameCat' ? true :
        response == 'no.competitor+otherCat' ? true :
        response == 'no.sameCat+otherCat' ? true :
        response == 'no.competitor+sameCat+otherCat' ? true : false
    condition(match)
    return(response)
  })
console.log("R1-Averager (full knowledge):")
terminalViz(R1PredictionReduced,4)

// ---------------------------------------------
// testing R1 with uncertainty about preferences
// ---------------------------------------------

console.log("---------------------------------------------\n",
            "Testing R1 with full knowledge of preferences",
            "---------------------------------------------\n")

// R1 considers two contexts equally likely /a priori/:
// in 'targetPref' Q most desires the target
// in 'otherPref'  Q most desires the 'other' object

// create extended context (overwriting the preferences in 'tsoContext')
var tsoContext_otherPref = extend(
  tsoContext,
  {name: 'tsoContext-otherPref',
   decisionProblem: function(w, a) {
     return _.includes(w, a) ?
       (a == 'target'     ? 1 :
        a == 'competitor' ? 1  :
        a == 'sameCat'    ? 10  :
        50) :
       0.0001;}}
)

// define R1's beliefs about contexts
var R1Prior_UncertainPreferences = {
  targetPref: tsoContext,
  otherPref:  tsoContext_otherPref,
  distribution: Categorical({vs: ["targetPref", "otherPref"]})
}

var R1posterior = R1ContextPosterior(tsoContext, question, R1Prior_UncertainPreferences, params);
console.log("Posterior inference (non-trivial)")
terminalViz(marginalize(R1posterior, 'label'),4)

var R1Prediction = R1Averager(tsoContext, R1Prior_UncertainPreferences, question, params)
var R1PredictionReduced = Infer({
  method: 'enumerate'},
  function() {
    var response = sample(R1Prediction);
    var match = response == 'no.---' ? true :
        response == 'no.competitor' ? true :
        response == 'no.competitor+sameCat' ? true :
        response == 'no.otherCat' ? true :
        response == 'no.competitor+sameCat+otherCat' ? true : false
    condition(match)
    return(response)
  })
console.log("R1-Averager (uncertain preferences):")
terminalViz(R1PredictionReduced,4)
